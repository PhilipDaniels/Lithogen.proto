Testing Guidelines
==================
* Name test projects after the assembly they are testing.
    Foo.dll -> Foo.Tests.Units and Foo.Tests.Integration

* Create 1 or 2 test projects for each assembly to be tested
    Foo.dll -> Foo.Tests.Unit = fast running tests
            -> Foo.Tests.Integration = slow running tests or that interact with the outside environment

* Mimic the folder/namespace structure of the AUT (assembly under test) in the test project.

* The general naming convention for a test is "Method_StateUnderTest_ExpectedBehavior" but
  this is modified by use of inner classes (see next item) which effectively promotes
  "Method_" to a class name, thus keeping names shorter and makes test classes easier
  to navigate.

* The [TestFixture] attribute is no longer need on any class.

* For a class Baz, create a BazTests class. DOES NOT NEED TO BE PUBLIC.
** For each method in Baz, create a class within BazTests (including Ctor). 
   THIS ALSO DOES NOT NEED TO BE PUBLIC.
** For each method under test, create a PUBLIC test method named
       StateUnderTest_ExpectedBehavior

   For good names, try starting StateUnderTest with 
           "When" - for referring to parameters
	   and "With" - for referring to state such as properties

	   WhenXXAndYYAndZZ

	   WhenFileNameIsEmptyWithNullBaseDirectory_ThrowsArgumentOutOfRangeException
       WhenCompleted_CreatesEmptyTagCollection
       WithNullProjectPath_ThrowsArgumentNullExpected
	   public void WhenProjectPathIsSetAndViewsDirectoryIsNull_MatchesVisualStudioDefaultsAndIsLowerCase()

   For the ExpectedBehaviour, try
      Throws* - for exceptions
	  ReturnsTrue/False/Null
	  Returns*
	  Succeeds - to simply indicate that the function does not blow up (typically
	             used with functions that return void and have side effects).

* It is nice to Assert.NotNull before checking more specific criteria as it results in a more
  meaningful error message.

* DO NOT use [Explicit] on classes that implement integration tests. These must be
  explicitly selected in the NUnit runner to run, and you have to do it class by class
  which is a pain. Instead follow the organization above, putting them in a separate
  project.

